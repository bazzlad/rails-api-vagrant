var isLive = true;
var apiUrl = '';
if (isLive) {
	//apiUrl = 'http://127.0.0.1:3000/';	
}


// hotel structure - used for tags
var hotels;
var package_info = {};

// base data if local
if (!isLive) {
	hotels = [
		{
			id: 1,
			name: "Richard's Luxury B&B",
			tags: [1],
			packages: [] // an array of packages
		},
		{
			id: 2,
			name: "Jan's Luxury B&B",
			tags: [1, 2],
			packages: [] // an array of packages
		},
		{
			id: 3,
			name: "Martin's Luxury B&B",
			tags: [3],
			packages: [] // an array of packages
		}
	];

	package_info = {
		tags: [
			{
				id: 1,
				name: {
					'en-gb': "Sports",
					'nl': "Sportief"
				},
				description: {
					'en-gb': "A sporty hotel",
					'nl': "En sportief hotel"
				}
			},
			{
				id: 2,
				name: {
					'en-gb': "Wellness",
					'nl': "Welzijn"
				},
				description: {
					'en-gb': "A hotel with a health focus",
					'nl': "En hotel met een gezondheid focus"
				}
			},
			{
				id: 3,
				name: {
					'en-gb': "City Location",
					'nl': "Gezellige Stad"
				},
				description: {
					'en-gb': "Hotel in a great location",
					'nl': "Hotel met een leuke locatie"
				}
			}
		],
		additions: [
			{
				id: 1,
				tags: [1], // which tags does this addition show for (-1 for all)
				name: {
					'en-gb': "Golf - Nine Holes",
					'nl': "Golf - Negen Holes"
				}
			},
			{
				id: 2,
				tags: [-1], // which tags does this addition show for (-1 for all)
				name: {
					'en-gb': "Breakfast",
					'nl': "Ontbijt"
				}
			},
			{
				id: 3,
				tags: [-1], // which tags does this addition show for (-1 for all)
				name: {
					'en-gb': "Free Parking",
					'nl': "Vrij Parkeren"
				}
			},
			{
				id: 4,
				tags: [2], // which tags does this addition show for (-1 for all)
				name: {
					'en-gb': "Spa day",
					'nl': "Spa Dag"
				}
			},
		]
	};

	// example of final output (gets added to hotel.packages)
	var package = {
		active: 1,
		date_start: null,
		date_end: null,
		title: {
			'en-gb': "Breakfast and Golf",
			'nl': "Ontbijt en Golf"
		},
		description: {
			'en-gb': "Enjoy a English Breakfast, followed by 9 holes on our incredible course",
			'nl': "Ontbijt en Golf - heel lekker toch"
		},
		additions: [1],
		// assuming there's a site wide currency converter...
		current_cost: 400,
		discount: 10,
		actual_cost: 360,
		available: 100,
		sold: 0
	};

	var package2 = {
		active: 1,
		date_start: null,
		date_end: null,
		title: {
			'en-gb': "Free Parking and Breakfast",
			'nl': "Vrij Parkeren en Ontbijt"
		},
		description: {
			'en-gb': "Park your car and fill up on a delicious breakfast, at no additional cost",
			'nl': "Vrij Parkeren en Ontbijt - yum yum"
		},
		additions: [3, 2],
		// assuming there's a site wide currency converter...
		current_cost: 300,
		discount: 20,
		actual_cost: 240,
		available: 3,
		sold: 47
	};

	hotels[0].packages.push(package);
	hotels[0].packages.push(package2);
}

// get from server
var server_data = {
	clean: function(data) {
		/*
			Shouldn't have to do this, should parse on the api side
		*/
		// hotels
		for (var i=0; i<data.hotels.length; i++) {
			var hotel = data.hotels[i];
			hotel.tags = JSON.parse(hotel.tags);
			hotel.packages = JSON.parse(hotel.packages);
		}
		hotels = data.hotels;
		// tags
		for (var i=0; i<data.package_info.tags.length; i++) {
			var tag = data.package_info.tags[i];
			tag.description = JSON.parse(tag.description);
			tag.name = JSON.parse(tag.name);
		}
		package_info.tags = data.package_info.tags;
		// additions
		for (var i=0; i<data.package_info.additions.length; i++) {
			var addition = data.package_info.additions[i];
			addition.tags = JSON.parse(addition.tags);
			addition.name = JSON.parse(addition.name);
		}
		package_info.additions = data.package_info.additions;
		server_data.finished();
	},
	finished: function() {
		console.log('Data fetched and cleaned');
	}
}
// helpers.js
/*
	A loose collection of small helper classes
*/

var _help = {};

//Any url methods
_help.url = {
	getParamByName: function (name) {
		/// <summary>
		/// Get url param value from url param name
		/// </summary>
		/// <param name="name">name of url param</param>
		/// <returns>Value of param</returns>

		var match = RegExp('[?&]' + name + '=([^&]*)')
			.exec(window.location.search);
		return match && decodeURIComponent(match[1].replace(/\+/g, ' '));
	},

	getParams: function () {
		/// <summary>
		/// Get all url params
		/// </summary>
		/// <returns>An object made of params and vals</returns>

		var vars = {};
		var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
			vars[key] = value;
		});
		return vars;
	}
};

_help.findInObjArray = function (prop, obj, needle, position) {
	 /// <summary>
	 /// Find in Array, useful for searching an array of objects
	 /// </summary>
	 /// <param name="prop">Property searching for</param>
	 /// <param name="obj">Array of objects you want to search</param>
	 /// <param name="needle">What you're searching for</param>
	 /// <param name="position">Optional flag to find position of element</param>
	 /// <returns>An array of objects that match</returns>
	 var returnObj = [];
	 for (var i = 0; i < obj.length; i++) {
		if (!obj[i]) {
			return;
		}
		  if (obj[i].hasOwnProperty(prop)) {
				if (needle == obj[i][prop]) {
					 if (position) {
						  returnObj.push(i);
					 } else {
						  returnObj.push(obj[i]);
					 }
				}
		  }
	 }
	 return returnObj[0];
};

_help.removeFromObjArray = function (prop, obj, needle) {
	/// <summary>
	/// Remove object from Array, useful for searching an array of objects and removing a match
	/// </summary>
	/// <param name="prop">Property searching for</param>
	/// <param name="obj">Array of objects you want to search</param>
	/// <param name="needle">What you're searching for</param>
	/// <returns>Bool</returns>
	var removed = false;
	for (var i = 0; i < obj.length; i++) {
		if (obj[i].hasOwnProperty(prop)) {
			if (needle == obj[i][prop]) {
				obj.splice([i], 1);
				removed = true;
			}
		}
	}
	if (removed) { return removed; }
};
// Super stepper class

var Stepper = function(stepperVars) {
   if (!stepperVars) {
      console.log("No stepper vars passed through");
      return;
   }
   var _this = this;
   this.steps = 0;
   this.current = 0;
   this.container = $("#" + stepperVars.id);
   this.navigation = false;
   this.navButtons = {
      forward: false,
      back: false,
      finish: false
   };
   this.direction = false;
   this.disableForwardBtn = false;
   // finish function
   this.finish = function() {
      console.log("You need to pass through a finish function");
   };
   if (stepperVars.disableForwardBtn) {
      this.disableForwardBtn = stepperVars.disableForwardBtn;
   }
   if (stepperVars.finish) {
      this.finish = stepperVars.finish;
   }
   // step confirmation arr
   this.stepConfirm = [];
   if (stepperVars.stepConfirm) {
      this.stepConfirm = stepperVars.stepConfirm;
   }
   // step confirmation arr
   this.stepInit = [];
   if (stepperVars.stepInit) {
      this.stepInit = stepperVars.stepInit;
   }
   // custom routes
   this.skipSteps = [];
   if (stepperVars.skipSteps) {
      this.skipSteps = stepperVars.skipSteps;
   }

   this.init = function() {
      // 1) count steps
      var steps = this.container.find(".step");
      this.steps = (steps.length-1);
      // re-hide each step
      steps.each(function() {
         $(this).hide();
      })
      if (this.steps === -1) {
         console.log("Stepper container requires steps");
         return;
      }

      // show first step
      $(steps[0]).show();
      if (this.stepInit[0]) {
         this.stepInit[0]();
      }

      // 2) sort navigation
      if (this.container.find(".step-nav").length) {
         // set vars
         this.navigation = true;
         this.navButtons.forward = this.container.find('.step-forward');
         this.navButtons.back = this.container.find('.step-back');
         this.navButtons.finish = this.container.find('.step-finish');
         // set clicks

         this.navButtons.forward.click(function() {
            if ($(this).attr('disabled')) {
               return;
            }
            _this.stepForward();
         });
         this.navButtons.back.click(function() {
            _this.stepBack();
         });
         this.navButtons.finish.click(function() {
            _this.finish();
         });
         this.checkNavigation();
         this.container.find(".step-nav").show();
      }
   };
   this.checkNavigation = function() {
      if (!this.navigation) {
         return;
      }
      this.navButtons.forward.show();
      if (this.disableForwardBtn) {
         this.navButtons.forward.attr('disabled', 'disabled');
      }
      this.navButtons.back.show();
      this.navButtons.finish.hide();

      if (this.current === 0) {
         this.navButtons.back.hide();
      }
      if (this.current === this.steps) {
         this.navButtons.forward.hide();
         this.navButtons.finish.show();
      }
   };
   this.stepTo = function(step) {
      if (step > this.steps) {
         console.log("You've gone too far");
         return;
      }

      // try and apply skip steps to warp
      // assume user is moving forward
      if (this.skipSteps) {
         if (this.skipSteps.includes(step)) {
            this.current = step;
            this.stepForward(true);
            return;
         }
      }

      this.direction = 'warp';
      this.current = step;
      var steps = this.container.find(".step");
      $(steps).hide();
      $(steps[step]).show();
      if (this.stepInit[step]) {
         this.stepInit[step]();
      }
      this.checkNavigation();
   };
   this.stepForward = function(skipValidation) {
      if (event) {
         event.preventDefault();
      }

      if (this.current === this.steps) {
         console.log("Steps complete");
         return;
      }

      if (!skipValidation) {
         if (this.stepConfirm[this.current]) {
            if (!this.stepConfirm[this.current]()) {
               console.log("Failed step validation");
               return false;
            }
         }
      }
      this.direction = 'forward';
      this.current++;

      if (this.skipSteps) {
         if (this.skipSteps.includes(this.current)) {
            this.stepForward(true);
            return;
         }
      }

      var steps = this.container.find(".step");
      $(steps).hide();
      $(steps[this.current]).show();
      if (this.stepInit[this.current]) {
         this.stepInit[this.current]();
      }
      this.checkNavigation();
   };
   this.stepBack = function() {
      if (event) {
         event.preventDefault();
      }
      if (this.current === 0) {
         console.log("Already at the start");
         return;
      }
      this.direction = 'backward';
      this.current--;

      if (this.skipSteps) {
         if (this.skipSteps.includes(this.current)) {
            this.stepBack();
            return;
         }
      }

      var steps = this.container.find(".step");
      $(steps).hide();
      $(steps[this.current]).show();
      if (this.stepInit[this.current]) {
         this.stepInit[this.current]();
      }
      this.checkNavigation();
   };
   this.enableForward = function() {
      // add time out for ui to catch up
      var _this = this;
      window.setTimeout(function() {
         if (typeof(_this.navButtons.forward) === "boolean") {
            _this.container.find('.step-forward').removeAttr("disabled");
         } else {
            _this.navButtons.forward.removeAttr("disabled");
         }
      }, 10);
   };
   this.disableForward = function() {
      // add time out for ui to catch up
      var _this = this;
      window.setTimeout(function() {
         if (typeof(_this.navButtons.forward) === "boolean") {
            _this.container.find('.step-forward').attr("disabled", "disabled");
         } else {
            _this.navButtons.forward.attr("disabled", "disabled");
         }
      }, 10);
   };
   // allow dynamic step skipping
   this.addSkipStep = function(step) {
      if (Array.isArray(step)) {
         for (var i=0; i<step.length; i++) {
            var currentStep = step[i];
            if (this.skipSteps.indexOf(currentStep) === -1) {
               this.skipSteps.push(currentStep);
            }
         }
      } else {
         if (this.skipSteps.indexOf(step) === -1) {
            this.skipSteps.push(step);
         }
      }
   };
   this.removeSkipStep = function(step) {
      if (Array.isArray(step)) {
         for (var i=0; i<step.length; i++) {
            var currentStep = step[i];
            if (this.skipSteps.indexOf(currentStep) !== -1) {
               var pos = this.skipSteps.indexOf(currentStep);
               this.skipSteps.splice(pos, 1);
            }
         }
      } else {
         if (this.skipSteps.indexOf(step) !== -1) {
            var pos = this.skipSteps.indexOf(step);
            this.skipSteps.splice(pos, 1);
         }
      }
   };
};

var app = new Vue({
	el: '#app',
	data: {
		hotel: null,
		lang: 'en-gb',
		editMode: false,
		editIndex: null,
		// add package data
		availableAdditions: [],
		selectedAdditions: [],
		// add package form
		pkgTitle_en_gb: null,
		pkgTitle_nl: null,
		pkgDescription_en_gb: null,
		pkgDescription_nl: null,
		pkgCurrentCost: null,
		pkgDiscount: null,
		pkgActualCost: null,
		pkgAvailable: null,
		// add hotel form
		hotelName: null,
		hotelTags: [],
		hotelSelectedTags: [],
		// force hotel list to reload
		hotelIndex: 0,
		hotelList: []
	},
	computed: {
		hotelLoaded () {
			return this.hotel !== null;
		},
		hotelHasPackages () {
			return this.hotel.packages.length;
		}
	},
	async mounted() {
		if (!isLive) {
			/* get local data */
			if (localStorage.getItem('hotels')) {
				try {
					hotels = JSON.parse(localStorage.getItem('hotels'));
					// need to reload them as hotels isn't responsive
					Vue.nextTick(function () {
						app.hotelIndex++;
					});
				} catch(e) {
					localStorage.removeItem('hotels');
				}
			}
		} else {
			/* get server data */
			var data = await axios.get(apiUrl + '/api/packages')
			.then(function (response) {
				server_data.clean(response.data);
			});
		}

		// add reactivity to hotels
		this.hotelList = hotels;

		// show main view
		$('#vp-main').show();

		var hotelId = _help.url.getParamByName('id');
		if (hotelId) {
			hotelId = parseFloat(hotelId);
		}
		this.loadHotel(hotelId);
	},
	methods: {
		loadHotel(id) {
			var hotel = _help.findInObjArray('id', hotels, id);
			if (hotel) {
				this.hotel = hotel;
			}
		},
		switchLang() {
			switch (this.lang) {
				case 'en-gb':
					this.lang = 'nl';
				break;
				case 'nl':
					this.lang = 'en-gb';
				break;
			}
		},
		// tags
		getTagName(tag) {
			var tagObj = _help.findInObjArray('id', package_info.tags, tag);

			if (tagObj) {
				return tagObj.name[this.lang];
			} else {
				return null;
			}
		},
		removeTag(index) {
			if (event) {
				event.preventDefault();
			}
			this.hotel.tags.splice(index, 1);
			this.saveData();
		},
		addTag() {
			var content = "";
			var tags = package_info.tags;
			var newTags = [];

			// remove any tag the hotel already has
			for (var i=0; i<tags.length; i++) {
				var tag = tags[i];
				var tagId = tag.id;
				var isUsed = false;
				for (var j=0; j<this.hotel.tags.length; j++) {
					var hotelTag = this.hotel.tags[j];
					if (hotelTag == tagId) {
						isUsed = true;
					}
				}
				if (!isUsed) {
					newTags.push(tag);
				}
			}

			// build select
			if (newTags.length) {
				content += `
					<div class="form-group">
					<label for="addTagSelect">Select a theme</label>
						<select class="form-control" id="addTagSelect">
				`;

				for (i=0; i<newTags.length; i++) {
					var newTag = newTags[i];
					content += `
						<option value="${newTag.id}">
							${newTag.name[this.lang]}
						</option>
					`;
				}

				content += `
						</select>
					</div>
					<div id="addTagDescription">
					</div>

					<button type="button" class="btn btn-outline-dark" onclick="app.doAddTag()">Add Theme</button>
				`;

			} else {
				content += `
					<p>You have already selected all available themes</p>
				`;
			}

			bootbox.dialog({
				title: 'Add a theme to your hotel',
				message: content
			});
		},
		doAddTag() {
			var tag = $('#addTagSelect option:selected').val();
			tag = parseFloat(tag);
			this.hotel.tags.push(tag);

			this.saveData();
			bootbox.hideAll();
		},
		// packages
		getAdditionName(index) {
			var additionObj = _help.findInObjArray('id', package_info.additions, index);

			if (additionObj) {
				return additionObj.name[this.lang];
			} else {
				return null;
			}
		},
		deletePackage(index, confirm) {
			if (event) {
				event.preventDefault();
			}
			// get confirmation first
			if (!confirm) {
				var title = `
					<span class="text-danger">Danger!</span>
				`;
				var message = `
					Are you sure you want to delete this package? This cannot be undone.
				`;
				bootbox.confirm({
					title: title,
					message: message,
					callback: (r) => {
						if (r) {
							app.deletePackage(index, true);
						}
					}
				});
				return;
			}

			this.hotel.packages.splice(index, 1);
			this.saveData();
		},
		addPackage() {
			this.resetPackage();
			this.showScreen('vp-add-package');
			
			// build select
			var options = "";
			var additions = this.getHotelAdditions();
			this.availableAdditions = additions;

			$('#pkgAdditionSelect').append(options);
		},
		editPackage(index) {
			if (event) {
				event.preventDefault();
			}

			this.resetPackage();
			this.editMode = true;
			this.editIndex = index;
			this.showScreen('vp-add-package');

			// add data into fields
			var package = this.hotel.packages[index];

			this.pkgTitle_en_gb = package.title['en-gb'];
			this.pkgTitle_nl = package.title['nl'];
			this.pkgDescription_en_gb = package.description['en-gb'];
			this.pkgDescription_nl = package.description['nl'];
			this.pkgCurrentCost = package.current_cost;
			this.pkgDiscount = package.discount;
			this.pkgActualCost = package.actual_cost;
			this.pkgAvailable = package.available;

			// add additions
			var additions = package_info.additions;
			for (var i=0; i<additions.length; i++) {
				var addition = additions[i];

				if (package.additions.indexOf(addition.id) !== -1) {
					this.selectedAdditions.push(addition);
				} else {
					// check if this addition is viewable by this hotel
					var enabled = false;
					for (var j=0; j<addition.tags.length; j++) {
						var tag = addition.tags[j];
						if (tag == -1) {
							enabled = true;
						}
						if (this.hotel.tags.indexOf(tag) !== -1) {
							enabled = true;
						}
					}
					if (enabled) {
						this.availableAdditions.push(addition);
					}
				}
			}
		},
		createAddPackageDisplay() {
		},
		cancelPackage(event, confirm) {
			if (event) {
				event.preventDefault();
			}
			// get confirmation first
			if (!confirm) {
				var title = `
					<span class="text-danger">Danger!</span>
				`;
				var message = `
					Are you sure you want to cancel creating this package? You will lose any data entered.
				`;
				bootbox.confirm({
					title: title,
					message: message,
					callback: (r) => {
						if (r) {
							app.cancelPackage(event, true);
						}
					}
				});
				return;
			}

			this.showScreen('vp-main');
			
			// reset data
			this.resetPackage();
		},
		calculateDiscount() {
			if (!this.pkgCurrentCost) {
				return;
			}

			if (!$.isNumeric(this.pkgCurrentCost)) {
				this.pkgCurrentCost = null;
				return;
			}

			if (!$.isNumeric(this.pkgDiscount)) {
				this.pkgDiscount = null;
				return;
			}

			var currentCost = parseFloat(this.pkgCurrentCost);
			var discountPerc = parseFloat(this.pkgDiscount);

			var discount = ((currentCost / 100) * discountPerc);
			var actualCost = currentCost - discount;

			this.pkgActualCost = actualCost;
		},
		resetPackage() {
			this.editMode = false;
			this.editIndex = null;
			this.availableAdditions = [];
			this.selectedAdditions = [];
			this.pkgTitle_en_gb = null;
			this.pkgTitle_nl = null;
			this.pkgDescription_en_gb = null;
			this.pkgDescription_nl = null;
			this.pkgCurrentCost = null;
			this.pkgDiscount = null;
			this.pkgActualCost = null;
			this.pkgAvailable = null;
		},
		createPackageObj() {
			var package = {
				active: 1,
				date_start: null,
				date_end: null,
				title: {
					'en-gb': this.pkgTitle_en_gb,
					'nl': this.pkgTitle_nl
				},
				description: {
					'en-gb': this.pkgDescription_en_gb,
					'nl': this.pkgDescription_nl
				},
				additions: [],
				// assuming there's a site wide currency converter...
				current_cost: this.pkgCurrentCost,
				discount: this.pkgDiscount,
				actual_cost: this.pkgActualCost,
				available: this.pkgAvailable,
				sold: 0
			};

			// add additions
			for (var i=0; i<this.selectedAdditions.length; i++) {
				var addition = this.selectedAdditions[i];
				package.additions.push(addition.id);
			}

			return package;
		},
		validatePackage() {
			if (!this.pkgTitle_en_gb) {
				bootbox.alert(`
					<h4>There is an error with your Package</h4>
					Package Name (English) is required
				`);
				return false;
			}

			if (!this.pkgTitle_nl) {
				bootbox.alert(`
					<h4>There is an error with your Package</h4>
					Package Name (Nederlands) is required
				`);
				return false;
			}

			if (!this.pkgDescription_en_gb) {
				bootbox.alert(`
					<h4>There is an error with your Package</h4>
					Package Description (English) is required
				`);
				return false;
			}

			if (!this.pkgDescription_nl) {
				bootbox.alert(`
					<h4>There is an error with your Package</h4>
					Package Description (Nederlands) is required
				`);
				return false;
			}

			if (!this.pkgCurrentCost) {
				bootbox.alert(`
					<h4>There is an error with your Package</h4>
					Current Cost is required
				`);
				return false;
			}

			if (!typeof(parseFloat(this.pkgCurrentCost)) == "number") {
				bootbox.alert(`
					<h4>There is an error with your Package</h4>
					Current Cost must be a number
				`);
				return false;
			}

			if (!this.pkgDiscount) {
				bootbox.alert(`
					<h4>There is an error with your Package</h4>
					Discount Percentage is required
				`);
				return false;
			}

			if (!typeof(parseFloat(this.pkgDiscount)) == "number") {
				bootbox.alert(`
					<h4>There is an error with your Package</h4>
					Discount Percentage must be a number
				`);
				return false;
			}

			if (!this.pkgActualCost) {
				bootbox.alert(`
					<h4>There is an error with your Package</h4>
					Actual Cost is required
				`);
				return false;
			}

			if (!typeof(parseFloat(this.pkgActualCost)) == "number") {
				bootbox.alert(`
					<h4>There is an error with your Package</h4>
					Actual Cost must be a number
				`);
				return false;
			}

			if (!this.pkgAvailable) {
				bootbox.alert(`
					<h4>There is an error with your Package</h4>
					Quantity Available is required
				`);
				return false;
			}

			if (!typeof(parseFloat(this.pkgAvailable)) == "number") {
				bootbox.alert(`
					<h4>There is an error with your Package</h4>
					Quantity Available must be a number
				`);
				return false;
			}

			return true;
		},
		savePackage() {
			// quick, rough validation
			if (!this.validatePackage()) {
				return false;
			}

			var package = this.createPackageObj();

			if (this.editMode) {
				this.hotel.packages[this.editIndex] = package;
			} else {
				this.hotel.packages.push(package);
			}

			// save data
			this.saveData();

			var message = "Package added";
			if (this.editMode) {
				message = "Package updated";
			}

			bootbox.alert(message, function() {
				app.showScreen('vp-main');
				app.resetPackage();
			});
		},
		// additions
		getHotelAdditions() {
			var tags = this.hotel.tags;
			var additions = [];

			for (var i=0; i<package_info.additions.length; i++) {
				var addition = package_info.additions[i];
				var tagList = addition.tags;
				
				var enabled = false;

				for (var j=0; j<tagList.length; j++) {
					var currentTag = tagList[j];
					// enabled for all
					if (currentTag === -1) {
						enabled = true;
					}
					// is in this hotels list
					if (tags.indexOf(currentTag) !== -1) {
						enabled = true;
					}
				}
				if (enabled) {
					additions.push(addition);
				}
			}

			return additions;
		},
		addAddition() {
			var addition;
			var additionId = $('#pkgAdditionSelect option:selected').val();
			additionId = parseFloat(additionId);
			
			var additionPos = _help.findInObjArray('id', this.availableAdditions, additionId, true);

			if (additionPos !== null) {
				addition = this.availableAdditions.splice(additionPos, 1);
				this.selectedAdditions.push(addition[0]);
			}
		},
		removeAddition(i) {
			event.preventDefault();
			var additionPos = _help.findInObjArray('id', this.selectedAdditions, i, true);

			if (additionPos !== null) {
				var addition = this.selectedAdditions.splice(additionPos, 1);
				this.availableAdditions.push(addition[0])
			}
		},
		// hotel
		getHotelLink(id) {
			return '?id=' + id;
		},
		addNewHotel() {
			var stepperVars = {
				id: "setup-wizard",
				// disableForwardBtn: true,
				// array of functions to confirm each step
				stepConfirm: [
					// step 1
					function() {
						if (!app.hotelName) {
							bootbox.alert(`
								<h4>There is an error with your Hotel</h4>
								Hotel name is required
							`);
							return false;
						}
						return true;
					},
					// step 2
					function() {
					}
				],
				// array of functions to run on each step load
				stepInit: [
					// step 1
					function() {
					},
					// step 2
					function() {
					}
				],
				finish: function() {
					app.createHotel();
					app.showScreen('vp-main');
					$("#setup-wizard").hide();

					bootbox.confirm({
						title: 'Hotel Created',
						message: 'Would you like to add a package now?',
						callback(r) {
							if (r) {
								app.addPackage();
							}
						}
					});
				}
			};

			// clone available tags
			var tags = JSON.stringify(package_info.tags);
			this.hotelTags = JSON.parse(tags);
			this.hotelSelectedTags = [];
			this.hotelName = null;

			hotelStepper = new Stepper(stepperVars);
			hotelStepper.init();
			$("#setup-wizard").show();

			$('.vp-screen').hide();
		},
		addTagToNewHotel(id) {
			if (event) {
				event.preventDefault();
			}
			var tagPos = _help.findInObjArray('id', this.hotelTags, id, true);

			if (tagPos !== null) {
				var tag = this.hotelTags.splice(tagPos, 1);
				this.hotelSelectedTags.push(tag[0]);
			}
		},
		removeTagFromNewHotel(id) {
			if (event) {
				event.preventDefault();
			}
			var tagPos = _help.findInObjArray('id', this.hotelSelectedTags, id, true);

			if (tagPos !== null) {
				var tag = this.hotelSelectedTags.splice(tagPos, 1);
				this.hotelTags.push(tag[0]);
			}
		},
		createHotel: function() {
			// get last id
			var id = (hotels[hotels.length-1].id + 1)
			var tags = [];
			for (var i=0; i<this.hotelSelectedTags.length; i++) {
				var tag = this.hotelSelectedTags[i];
				tags.push(tag.id);
			}
			var hotel = {
				id: id,
				name: this.hotelName,
				tags: tags,
				packages: [] // an array of packages
			}
			hotels.push(hotel);

			// go to page
			this.loadHotel(id);

			this.saveData(true);

			// reload hotel data
			this.hotelIndex++;
		},
 		// global functions
		saveData(addNew) {
			if (!isLive) {
				// save changes to local storage
				const parsed = JSON.stringify(hotels);
				localStorage.setItem('hotels', parsed);
			} else {
				var hotel = this.hotel
				var url = apiUrl + 'api/hotels/';
				if (!addNew) {
					 url += hotel.id;
				}

				var data = {
					name: hotel.name,
					tags: JSON.stringify(hotel.tags),
					packages: JSON.stringify(hotel.packages)
				}

				if (!addNew) {
					axios.put(url, data)
					.then(function (response) {
						// handle success
						console.log('Put' + response.data);
					})
				} else {
					axios.post(url, data)
					.then(function (response) {
						// handle success
						console.log('Pushed' + response.data);
					})
				}
			}
		},
		showScreen(screenName) {
			if (!$('#' + screenName).length) {
				return;
			}
			$('.vp-screen').hide();
			$('#' + screenName).show();
			window.scrollTo(0, 0);
		}
	}
});

// keep the stepper outside of vue
var hotelStepper;